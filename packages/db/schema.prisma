// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and authentication models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  ideas         Idea[]
  leads         Lead[]
  aiArtifacts   AIArtifact[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Content models
model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  excerpt     String?
  content     String      @db.Text
  published   Boolean     @default(false)
  featured    Boolean     @default(false)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  authorId    String
  categoryId  String?
  status      PostStatus  @default(DRAFT)
  
  author      User        @relation(fields: [authorId], references: [id])
  category    Category?   @relation(fields: [categoryId], references: [id])
  tags        Tag[]       @relation("PostTags")
  media       Media[]     @relation("PostMedia")
  seoData     SEOData?
  aiArtifacts AIArtifact[]

  @@index([slug])
  @@index([published, publishedAt])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]

  @@index([slug])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("PostTags")

  @@index([slug])
}

// Ideas and content planning
model Idea {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  content     String?    @db.Text
  status      IdeaStatus @default(BACKLOG)
  priority    Priority   @default(MEDIUM)
  tags        String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  
  user        User       @relation(fields: [userId], references: [id])
  aiArtifacts AIArtifact[]

  @@index([status])
  @@index([priority])
}

// Media management
model Media {
  id          String      @id @default(cuid())
  url         String
  key         String?     // Storage key for cloud providers
  filename    String
  mimetype    String
  size        Int
  width       Int?
  height      Int?
  alt         String?
  caption     String?
  provider    MediaProvider
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  posts       Post[]      @relation("PostMedia")

  @@index([provider])
  @@index([mimetype])
}

// Lead capture and management
model Lead {
  id          String     @id @default(cuid())
  email       String
  name        String?
  phone       String?
  company     String?
  source      String?    // Where the lead came from
  status      LeadStatus @default(NEW)
  tags        String[]
  notes       String?    @db.Text
  metadata    Json?      // Additional lead data
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String?    // Assigned user
  
  user        User?      @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([email])
  @@index([source])
}

// AI artifacts and workflow
model AIArtifact {
  id          String         @id @default(cuid())
  type        AIArtifactType
  title       String
  content     String         @db.Text
  metadata    Json?
  status      AIArtifactStatus @default(DRAFT)
  approved    Boolean        @default(false)
  approvedAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String
  postId      String?
  ideaId      String?
  
  user        User           @relation(fields: [userId], references: [id])
  post        Post?          @relation(fields: [postId], references: [id])
  idea        Idea?          @relation(fields: [ideaId], references: [id])

  @@index([type])
  @@index([status])
  @@index([approved])
}

// SEO data
model SEOData {
  id               String   @id @default(cuid())
  title            String?
  description      String?
  keywords         String[]
  ogTitle          String?
  ogDescription    String?
  ogImage          String?
  twitterTitle     String?
  twitterDescription String?
  twitterImage     String?
  canonicalUrl     String?
  noindex          Boolean  @default(false)
  nofollow         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  postId           String   @unique
  
  post             Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// Enums
enum UserRole {
  USER
  ADMIN
  EDITOR
}

enum PostStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

enum IdeaStatus {
  BACKLOG
  ACTIVE
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MediaProvider {
  SUPABASE
  CLOUDINARY
  IMGIX
  LOCAL
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

enum AIArtifactType {
  OUTLINE
  FACTS
  CONTENT
  SEO_METADATA
  SUMMARY
}

enum AIArtifactStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
}